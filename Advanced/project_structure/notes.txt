Packages & Crates:
Our previous Rust programs all lived in a single file. When we run the cargo new command, we
create a Rust package.
A 'project' is a folder with Cargo.toml file. The Cargo.toml file holds metadata about the
package like it's name and version. A 'package' is a collection of one or more crates.
A 'crate' is a collection of Rust code that produces an executable or a library
A crate is the smallest amount of code that the Rust compiler considers at a time.
A 'binary crate' is a carte that compiles to an executable. A binary crate has a main function
that is the entrypoint for the executable.
A 'library crate' exports functionality for other Rust programs to share and use. A library
crate does not have a main function and does not compile to be an executable program.
Module: A module is an organizational container that encapsulates related code.

Approaches to create modules:
- The 1st option of defining a module is inline module, writing modules within same file is allowed and it is one of three methods of how you can
create modules but this approach has limitation when it comes to scalability.
main.rs here serves as a crate root. A 'crate root' is the base/foundation of a crate ( the
starting point for the compiler), we generally want to keep the main.rs file pretty lightweight,
so in this case we can distribute the modules in separate files and use them in the crate root.
- The 2nd option of defining the modules is you can create a file with the same name as mod
you want to define and when you write mod inventory; in the main.rs the compiler will look for
inventory.rs file within the same folder.
- The 3rd option for declaring a modules content is to create a directory for a module rather than a file.
If we create a dir module we need to give that directory the same name as the module, then we also need to create a file inside that folder and that file must be named as mod.rs.
NOTE: We can not have an inline module and a file module with the same name or a file module and a folder module, rust will not allow the code to compile if it encounters as such. You can create submodules within modules by defining a mod in a module which would be accessed as submodule, the same rules of modules apply to the submodules.

Dependencies:
A dependency is an external library crate that we pull into our project. Our code depends on it to run.
when you want to pull in any dependencies you will define those in the Cargo.toml file and when you run either cargo run or cargo build cargo will download the dependencies that are listed in the Cargo.toml file.
for this example we're using a lib crate called 'fake', The fake crate depends on the rand crate, so we'll need to add it as well, You dependencies section would look something like this:
  [dependencies]
  ran = "0.8.5"
  fake = { version = "2.9.2", features = ["derive"]}
The standard library is a collection of modules built into Rust. eg. usage is:
use std::{
    fmt,
    io::{self, stdin, stdout}, // here the self keyword allows us to use io if we don't include that we'd be only able to access the stdin and stdout names but with self we can also use io and then any item within if we want like io::name.
};
Glob operator '*' allows you to import every public item in a module. eg. use std::collection::*
Importing convention is:
 1. Imports from Rust's standard library.
 2. External crate Imports
 3. local module Imports.

 The Rust package requires at least one of the crate it can be either binary or library crate.
 You can have a binary crate and a library crate separately but you can also have them combined in one package where the foundation of you binary crate code will live in src/main.rs and the library crate code will live in src/lib.rs
 You can have multiple binary crates within a single package to achieve this we have to create a bin folder within the src folder, and every rust file inside the bin folder will be treated as a separate binary crate. eg. src/bin/separate_bin.rs. the name of the .rs file can be anything you want and it could be any number of files you need.
 Now if you were to just do 'cargo run' the code will not compile since it does not know which binary to run to specify which binary you'd like to run you can do 'cargo run --bin warehouse' -> this will run the primary binary crate which is in main.rs. But if you instead want to run any of the files within the bin directory you do "cargo run --bin <file_name>" eg. 'cargo run --bin separate_bin'
