Intro to traits:
  * A trait is a "a distinguishing quality or characteristic". Eg. Consider a trait like flight. Flight describes the quality of being able to fly.

Traits in Rust:
  * A trait is a contract that describes functionality that a type should have.
  * We use the word implement to describe when a type honors a trait's requirements. For the previous example we can say that a bird, a fly and an airoplane implement the 'Flight' trait.
  * A trait definition declares the method(s) that a type implementing that trait must have. method name, parameters with types, return value type.

Traits we've seen before:
  * The 'Display' and 'Debug' traits require a type to define methods for presenting itself as a string.
  * The 'Clone' trait requires a type to define a clone method for creating a duplicate of itself.

Implementations:
  * Once we have defined a trait, we can implement it on structs and enums. The type promises to honor the trait's contract.
  * Multiple types can implement the same trait.
  * A type can implement multiple traits.

